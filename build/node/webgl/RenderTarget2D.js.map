{"version":3,"sources":["webgl/RenderTarget2D.ts"],"names":[],"mappings":"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","file":"webgl/RenderTarget2D.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/17.\r\n */\r\n\r\nimport {WebGLRenderer} from \"./WebGLRenderer\";\r\nimport {IDisposable} from \"../IDisposable\";\r\nimport {PackedArrayBuffer} from \"./PackedArrayBuffer\";\r\nimport {GLUtil} from \"../GLUtil\";\r\n\r\nvar gl = (<any>this).WebGLRenderingContext || (<any>window).WebGLRenderingContext;\r\nvar isInitializedStatically:boolean = false;\r\n\r\n/**\r\n * Represents a 2D render target based on WebGL texture.\r\n */\r\nexport class RenderTarget2D implements IDisposable {\r\n\r\n    /**\r\n     * Instantiates a new {@link RenderTarget2D}.\r\n     * @param renderer {WebGLRenderer} The {@link WebGLRenderer} used to create this new {@link RenderTarget2D}.\r\n     * @param [image] {ImageData|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} The initial image or image-related\r\n     * HTML element. See {@link RenderTarget2D.image} for more information. The default value is null.\r\n     * @param [isRoot] {Boolean} Declares whether the {@link RenderTarget2D} is a root for display. See {@link RenderTarget2D.isRoot}\r\n     * for more information. The default value is false.\r\n     * @implements {IDisposable}\r\n     */\r\n    constructor(renderer:WebGLRenderer, image:ImageData|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement = null, isRoot:boolean = false) {\r\n        if (!isInitializedStatically) {\r\n            initStaticFields(renderer.context);\r\n        }\r\n        this._renderer = renderer;\r\n        this.__initialize(renderer.context, renderer.view.width, renderer.view.height, image, isRoot);\r\n    }\r\n\r\n    /**\r\n     * Disposes the {@link RenderTarget2D} and related resources.\r\n     */\r\n    dispose():void {\r\n        var glc = this._glc;\r\n        glc.deleteTexture(this._texture);\r\n        glc.deleteFramebuffer(this._frameBuffer);\r\n        glc.deleteRenderbuffer(this._depthBuffer);\r\n        this._texture = null;\r\n        this._frameBuffer = null;\r\n        this._depthBuffer = null;\r\n        this._glc = null;\r\n        this._renderer = null;\r\n    }\r\n\r\n    /**\r\n     * Returns the original width of the {@link RenderTarget2D}.\r\n     * Old WebGL contexts restrict the width and height of textures to being a power of 2. However, users may want to\r\n     * create custom-sized {@link RenderTarget2D}s, which requires the targets using various sizes of \"textures\".\r\n     * Creating textures width and height different from power of 2 is not allowed in these cases, so textures slightly\r\n     * larger than needed with width and height being power of 2 is created.\r\n     * Therefore, the original size is the size requested, and the fit size is the real size of texture. During rendering,\r\n     * the original size is used for presenting, and the fit size is used for manipulation.\r\n     * @see {@link RenderTarget2D.originalHeight}\r\n     * @see {@link RenderTarget2D.fitWidth}\r\n     * @see {@link RenderTarget2D.fitHeight}\r\n     * @returns {Number} The original width of the {@link RenderTarget2D}.\r\n     */\r\n    get originalWidth():number {\r\n        return this._originalWidth;\r\n    }\r\n\r\n    /**\r\n     * Returns the original height of the {@link RenderTarget2D}. See {@link RenderTarget2D.originalWidth} for more information.\r\n     * @see {@link RenderTarget2D.originalWidth}\r\n     * @see {@link RenderTarget2D.fitWidth}\r\n     * @see {@link RenderTarget2D.fitHeight}\r\n     * @returns {number}\r\n     */\r\n    get originalHeight():number {\r\n        return this._originalHeight;\r\n    }\r\n\r\n    /**\r\n     * Returns the fit width of the {@link RenderTarget2D}. See {@link RenderTarget2D.originalWidth} for more information.\r\n     * @see {@link RenderTarget2D.originalWidth}\r\n     * @see {@link RenderTarget2D.originalHeight}\r\n     * @see {@link RenderTarget2D.fitHeight}\r\n     * @returns {Number} The fit width of the {@link RenderTarget2D}.\r\n     */\r\n    get fitWidth():number {\r\n        return this._fitWidth;\r\n    }\r\n\r\n    /**\r\n     * Returns the fit height of the {@link RenderTarget2D}. See {@link RenderTarget2D.originalWidth} for more information.\r\n     * @see {@link RenderTarget2D.originalWidth}\r\n     * @see {@link RenderTarget2D.originalHeight}\r\n     * @see {@link RenderTarget2D.fitHeight}\r\n     * @returns {number}\r\n     */\r\n    get fitHeight():number {\r\n        return this._fitHeight;\r\n    }\r\n\r\n    /**\r\n     * Returns the underlying {@link WebGLTexture} of the {@link RenderTarget2D}. May be null if the target is a root target.\r\n     * @returns {WebGLTexture} The underlying texture.\r\n     */\r\n    get texture():WebGLTexture {\r\n        return this._texture;\r\n    }\r\n\r\n    /**\r\n     * The content used to create the {@link RenderTarget2D}. It is useful for importing external images, or dynamically\r\n     * rendering image sequences from {@link HTMLVideoElement}s. Null means this is a blank {@link RenderTarget2D}.\r\n     * @returns {ImageData|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\r\n     */\r\n    get image():ImageData|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement {\r\n        return this._image;\r\n    }\r\n\r\n    /**\r\n     * Returns whether the {@link RenderTarget2D} is a root for display. A root {@link RenderTarget2D}\r\n     * has no underlying textures and renders directly to the output buffer (i.e. the &lt;canvas&gt; attached to the\r\n     * {@link WebGLRenderer}. So they must be used as final render target, not buffers.\r\n     * @returns {Boolean} True if the {@link RenderTarget2D} is a root target, and false otherwise.\r\n     */\r\n    get isRoot():boolean {\r\n        return this._isRoot;\r\n    }\r\n\r\n    /**\r\n     * Activates the {@link RenderTarget2D}, and all the rendering after the activation will be done on this target.\r\n     */\r\n    activate():void {\r\n        var glc = this._glc;\r\n        glc.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n    }\r\n\r\n    /**\r\n     * Clears the content on the {@link RenderTarget2D}.\r\n     */\r\n    clear():void {\r\n        this.activate();\r\n        var glc = this._glc;\r\n        glc.viewport(0, 0, this._fitWidth, this._fitHeight);\r\n        glc.clearColor(0, 0, 0, 0);\r\n        glc.clearDepth(0);\r\n        glc.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    /**\r\n     * Resizes the {@link RenderTarget2D}. Note that currently this function is only a wrapper for the internal one, and\r\n     * public calls are experimental.\r\n     * @param newWidth {Number} The new width, in pixels.\r\n     * @param newHeight {Number} The new height, in pixels.\r\n     */\r\n    resize(newWidth:number, newHeight:number):void {\r\n        this.__resize(newWidth, newHeight, true);\r\n    }\r\n\r\n    /**\r\n     * Update the content of this {@link RenderTarget2D} if the source is a {@link HTMLCanvasElement},\r\n     * {@link HTMLImageElement}, {@link HTMLVideoElement}, or {@link ImageData}. This operation will retrieve\r\n     * current image (a snapshot if it is a dynamic canvas or image sequence) and draw it on this\r\n     * {@link RenderTarget2D}.\r\n     */\r\n    updateImageContent():void {\r\n        var image = this._image;\r\n        if (this._texture === null || image === null) {\r\n            return;\r\n        }\r\n        var glc = this._glc;\r\n        glc.bindTexture(gl.TEXTURE_2D, this._texture);\r\n        glc.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, <ImageData>image);\r\n        glc.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    /**\r\n     * Update image size to fit the whole scene.\r\n     */\r\n    updateImageSize():void {\r\n        var image = this._image;\r\n        if (this._texture === null || image === null) {\r\n            return;\r\n        }\r\n        // TODO: Maybe this operation should not be done on each update call.\r\n        // Find a way to optimize, for example, freeze the size when created, or implement a draw call\r\n        // flexible enough to handle all sort of sizes.\r\n        try {\r\n            image.width = GLUtil.power2Roundup(image.width);\r\n            image.height = GLUtil.power2Roundup(image.height);\r\n        } catch (ex) {\r\n        }\r\n        this._originalWidth = this._fitWidth = image.width;\r\n        this._originalHeight = this._fitHeight = image.height;\r\n    }\r\n\r\n    /**\r\n     * Initializes the {@link RenderTarget2D}.\r\n     * @param glc {WebGLRenderingContext} The {@link WebGLRenderingContext} used to manipulate the {@link RenderTarget2D}.\r\n     * @param width {Number} The new width, in pixels.\r\n     * @param height {Number} The new height, in pixels.\r\n     * @param image {ImageData|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} See {@link RenderTarget2D.constructor}\r\n     * for more information.\r\n     * @param isRoot {Boolean} See {@link RenderTarget2D.isRoot} for more information.\r\n     * @private\r\n     */\r\n    private __initialize(glc:WebGLRenderingContext, width:number, height:number,\r\n                         image:ImageData|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement, isRoot:boolean):void {\r\n        this._glc = glc;\r\n        this._isRoot = isRoot;\r\n        this._image = image;\r\n\r\n        function error(message:string) {\r\n            glc.deleteFramebuffer(this._frameBuffer);\r\n            glc.deleteRenderbuffer(this._depthBuffer);\r\n            glc.deleteTexture(this._texture);\r\n            console.warn(message);\r\n        }\r\n\r\n        if (!isRoot) {\r\n            this._frameBuffer = glc.createFramebuffer();\r\n            if (this._frameBuffer === null) {\r\n                return error(\"Failed to create the frame buffer.\");\r\n            }\r\n            this._depthBuffer = glc.createRenderbuffer();\r\n            if (this._depthBuffer === null) {\r\n                return error(\"Failed to create the depth buffer.\");\r\n            }\r\n            this._texture = glc.createTexture();\r\n            if (this._texture === null) {\r\n                return error(\"Failed to create the underlying texture.\");\r\n            }\r\n        }\r\n        this.__resize(width, height, false);\r\n        if (!isRoot) {\r\n            glc.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);\r\n            glc.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._texture, 0);\r\n            glc.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._depthBuffer);\r\n            var status = glc.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n            if (status !== gl.FRAMEBUFFER_COMPLETE) {\r\n                return error(\"Frame buffer is not complete: code 0x\" + status.toString(16));\r\n            }\r\n        }\r\n        glc.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        glc.bindTexture(gl.TEXTURE_2D, null);\r\n        glc.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n    /**\r\n     * Resizes the {@link RenderTarget2D}.\r\n     * @param newWidth {Number} The new width, in pixels.\r\n     * @param newHeight {Number} The new height, in pixels.\r\n     * @param unbind {Boolean} Whether should unbind the texture after resizing or not. Unbinding is not required during\r\n     * initialization, but should be done during custom resizing.\r\n     * @private\r\n     */\r\n    private __resize(newWidth:number, newHeight:number, unbind:boolean):void {\r\n        var glc = this._glc;\r\n        var image = this._image;\r\n        var isRoot = this._isRoot;\r\n        var texture = this._texture;\r\n\r\n        if (image === null) {\r\n            newWidth |= 0;\r\n            newHeight |= 0;\r\n            this._originalWidth = newWidth;\r\n            this._originalHeight = newHeight;\r\n            if (!GLUtil.isPowerOfTwo(newWidth)) {\r\n                newWidth = GLUtil.power2Roundup(newWidth);\r\n            }\r\n            if (!GLUtil.isPowerOfTwo(newHeight)) {\r\n                newHeight = GLUtil.power2Roundup(newHeight);\r\n            }\r\n            this._fitWidth = newWidth;\r\n            this._fitHeight = newHeight;\r\n        } else {\r\n            // TODO: WARNING: Not tested, may also need to round-up to power of 2.\r\n            newWidth = this._originalWidth = this._fitWidth = image.width;\r\n            newHeight = this._originalHeight = this._fitHeight = image.height;\r\n        }\r\n\r\n        if (texture !== null) {\r\n            glc.bindTexture(gl.TEXTURE_2D, this._texture);\r\n            glc.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            glc.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n            glc.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            glc.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        }\r\n        if (image !== null) {\r\n            // We flip the whole image vertically during the last stage, drawing to the screen.\r\n            // So there is no need to flip the images here - all the contents in child RenderTarget2Ds\r\n            // are vertically mirrored, and they will be transformed in one at last.\r\n            //glc.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);\r\n            if (texture !== null) {\r\n                glc.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, <ImageData>image);\r\n            }\r\n        } else {\r\n            glc.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\r\n            if (texture !== null) {\r\n                glc.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, newWidth, newHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n            }\r\n        }\r\n        if (!isRoot) {\r\n            glc.bindRenderbuffer(gl.RENDERBUFFER, this._depthBuffer);\r\n            glc.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, newWidth, newHeight);\r\n        }\r\n        if (unbind) {\r\n            glc.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n            glc.bindTexture(gl.TEXTURE_2D, null);\r\n        }\r\n    }\r\n\r\n    protected _glc:WebGLRenderingContext = null;\r\n    protected _renderer:WebGLRenderer = null;\r\n    protected _frameBuffer:WebGLFramebuffer = null;\r\n    protected _depthBuffer:WebGLRenderbuffer = null;\r\n    protected _texture:WebGLTexture = null;\r\n    protected _originalWidth:number = 0;\r\n    protected _originalHeight:number = 0;\r\n    protected _fitWidth:number = 0;\r\n    protected _fitHeight:number = 0;\r\n    protected _image:ImageData|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement = null;\r\n    private _isRoot:boolean = false;\r\n\r\n    static textureCoords:PackedArrayBuffer = null;\r\n    static textureIndices:PackedArrayBuffer = null;\r\n\r\n}\r\n\r\nfunction initStaticFields(glc:WebGLRenderingContext) {\r\n    if (isInitializedStatically) {\r\n        return;\r\n    }\r\n    var textureCoords = [\r\n        0, 1,\r\n        1, 1,\r\n        0, 0,\r\n        1, 0\r\n    ];\r\n    var textureIndices = [\r\n        0, 1, 2,\r\n        1, 2, 3\r\n    ];\r\n    RenderTarget2D.textureCoords = PackedArrayBuffer.create(glc, textureCoords, gl.FLOAT, gl.ARRAY_BUFFER);\r\n    RenderTarget2D.textureIndices = PackedArrayBuffer.create(glc, textureIndices, gl.UNSIGNED_SHORT, gl.ELEMENT_ARRAY_BUFFER);\r\n    isInitializedStatically = true;\r\n}\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["webgl/graphics/StrokeRendererBase.ts"],"names":[],"mappings":"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","file":"webgl/graphics/StrokeRendererBase.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/20.\r\n */\r\n\r\nimport {GraphicsDataRendererBase} from \"./GraphicsDataRendererBase\";\r\nimport {Graphics} from \"../../flash/display/Graphics\";\r\nimport {IStrokeDataRenderer} from \"./IStrokeDataRenderer\";\r\n\r\nexport abstract class StrokeRendererBase extends GraphicsDataRendererBase implements IStrokeDataRenderer {\r\n\r\n    constructor(graphics:Graphics, lastPathStartX:number, lastPathStartY:number, currentX:number, currentY:number) {\r\n        super(graphics, lastPathStartX, lastPathStartY, currentX, currentY);\r\n        this._lineVerticesStorage = [[0, 0], [0, 0], [0, 0], [0, 0]];\r\n    }\r\n\r\n    moveTo(x:number, y:number):void {\r\n        // This action seems weird...\r\n        if (this._graphics.isFilling) {\r\n            this.closePath();\r\n        }\r\n        this._currentX = x;\r\n        this._currentY = y;\r\n        this._lastPathStartX = x;\r\n        this._lastPathStartY = y;\r\n    }\r\n\r\n    protected __getSimLineVertices(x1:number, y1:number, x2:number, y2:number, z:number, width:number):number[] {\r\n        if (width < 0) {\r\n            return [];\r\n        }\r\n        var halfWidth = width / 2;\r\n        var vert1 = this._lineVerticesStorage[0],\r\n            vert2 = this._lineVerticesStorage[1],\r\n            vert3 = this._lineVerticesStorage[2],\r\n            vert4 = this._lineVerticesStorage[3];\r\n        if (x1 === x2) {\r\n            vert1[0] = x1 - halfWidth;\r\n            vert1[1] = y1 > y2 ? y1 + halfWidth : y1 - halfWidth;\r\n            vert2[0] = x1 + halfWidth;\r\n            vert2[1] = y1 > y2 ? y1 + halfWidth : y1 - halfWidth;\r\n            vert3[0] = x2 - halfWidth;\r\n            vert3[1] = y1 > y2 ? y2 - halfWidth : y2 + halfWidth;\r\n            vert4[0] = x2 + halfWidth;\r\n            vert4[1] = y1 > y2 ? y2 - halfWidth : y2 + halfWidth;\r\n        } else {\r\n            var slope = (y2 - y1) / (x2 - x1);\r\n            var ct = 1 / Math.sqrt(1 + slope * slope);\r\n            var st = Math.sqrt(1 - ct * ct);\r\n            // dx/dy: additional length considering the line width perpendicular to the line itself\r\n            var dx = halfWidth * st;\r\n            var dy = halfWidth * ct;\r\n            // dtx/dty: additional length considering the line width at end points\r\n            var dtx = dy;\r\n            var dty = dx;\r\n            // move the line to their new end points\r\n            if (x1 > x2) {\r\n                x1 += dtx;\r\n                x2 -= dtx;\r\n            } else {\r\n                x1 -= dtx;\r\n                x2 += dtx;\r\n            }\r\n            if (y1 > y2) {\r\n                y1 += dty;\r\n                y2 -= dty;\r\n            } else {\r\n                y1 -= dty;\r\n                y2 += dty;\r\n            }\r\n            // and calculate simulating rectangle\r\n            vert1[0] = x1 - dx;\r\n            vert2[0] = x1 + dx;\r\n            vert3[0] = x2 - dx;\r\n            vert4[0] = x2 + dx;\r\n            if (slope >= 0) {\r\n                vert1[1] = y1 + dy;\r\n                vert2[1] = y1 - dy;\r\n                vert3[1] = y2 + dy;\r\n                vert4[1] = y2 - dy;\r\n            } else {\r\n                vert1[1] = y1 - dy;\r\n                vert2[1] = y1 + dy;\r\n                vert3[1] = y2 - dy;\r\n                vert4[1] = y2 + dy;\r\n            }\r\n        }\r\n        return [\r\n            vert1[0], vert1[1], z, vert2[0], vert2[1], z,\r\n            vert3[0], vert3[1], z, vert4[0], vert4[1], z\r\n        ];\r\n    }\r\n\r\n    private _lineVerticesStorage:number[][] = null;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
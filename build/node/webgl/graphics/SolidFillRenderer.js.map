{"version":3,"sources":["webgl/graphics/SolidFillRenderer.ts"],"names":[],"mappings":"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","file":"webgl/graphics/SolidFillRenderer.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/20.\r\n */\r\n\r\nimport libtess = require(\"libtess\");\r\n\r\nimport {FillRendererBase} from \"./FillRendererBase\";\r\nimport {Graphics} from \"../../flash/display/Graphics\";\r\nimport {CURVE_ACCURACY, STD_Z} from \"./GRAPHICS_CONST\";\r\nimport {WebGLRenderer} from \"../WebGLRenderer\";\r\nimport {RenderHelper} from \"../RenderHelper\";\r\nimport {GLUtil} from \"../../GLUtil\";\r\nimport {NotImplementedError} from \"../../flash/errors/NotImplementedError\";\r\n\r\nexport class SolidFillRenderer extends FillRendererBase {\r\n\r\n    constructor(graphics:Graphics, startX:number, startY:number, color:number, alpha:number) {\r\n        super(graphics, startX, startY);\r\n        this._a = GLUtil.limitInto(alpha, 0, 1);\r\n        this._r = ((color >>> 16) & 0xff) / 0xff;\r\n        this._g = ((color >>> 8 ) & 0xff) / 0xff;\r\n        this._b = (color & 0xff) / 0xff;\r\n    }\r\n\r\n    bezierCurveTo(cx1:number, cy1:number, cx2:number, cy2:number, x:number, y:number):void {\r\n        this._isDirty = true;\r\n        var currentContour = this.getContourForLines();\r\n        if (!this._hasDrawnAnything || this._startingNewContour) {\r\n            currentContour.push(this._currentX, this._currentY, STD_Z);\r\n        }\r\n        var dt1:number, dt2:number, dt3:number;\r\n        var t2:number, t3:number;\r\n        var fromX = this._currentX, fromY = this._currentY;\r\n        var xa:number, ya:number;\r\n        var j:number;\r\n        for (var i = 1; i <= CURVE_ACCURACY; i++) {\r\n            j = i / CURVE_ACCURACY;\r\n            dt1 = 1 - j;\r\n            dt2 = dt1 * dt1;\r\n            dt3 = dt2 * dt1;\r\n            t2 = j * j;\r\n            t3 = t2 * j;\r\n            xa = dt3 * fromX + 3 * dt2 * j * cx1 + 3 * dt1 * t2 * cx2 + t3 * x;\r\n            ya = dt3 * fromY + 3 * dt2 * j * cy1 + 3 * dt1 * t2 * cy2 + t3 * y;\r\n            currentContour.push(xa, ya, STD_Z);\r\n        }\r\n        this._currentX = x;\r\n        this._currentY = y;\r\n        this._hasDrawnAnything = true;\r\n        this._startingNewContour = false;\r\n    }\r\n\r\n    curveTo(cx:number, cy:number, x:number, y:number):void {\r\n        this._isDirty = true;\r\n        var currentContour = this.getContourForLines();\r\n        if (!this._hasDrawnAnything || this._startingNewContour) {\r\n            currentContour.push(this._currentX, this._currentY, STD_Z);\r\n        }\r\n        var j:number;\r\n        var fromX = this._currentX, fromY = this._currentY;\r\n        var xa:number, ya:number;\r\n        for (var i = 1; i <= CURVE_ACCURACY; i++) {\r\n            j = i / CURVE_ACCURACY;\r\n            xa = fromX + (cx - fromX) * j;\r\n            ya = fromY + (cy - fromY) * j;\r\n            xa = xa + (cx + (x - cx) * j - xa) * j;\r\n            ya = ya + (cy + (y - cy) * j - ya) * j;\r\n            currentContour.push(xa, ya, STD_Z);\r\n        }\r\n        this._currentX = x;\r\n        this._currentY = y;\r\n        this._hasDrawnAnything = true;\r\n        this._startingNewContour = false;\r\n    }\r\n\r\n    drawCircle(x:number, y:number, radius:number):void {\r\n        this._isDirty = true;\r\n        this.moveTo(x, y);\r\n        var currentContour = this.getContourForClosedShapes();\r\n        var thetaNext:number;\r\n        var thetaBegin:number;\r\n        var x2:number, y2:number;\r\n        var halfPi = Math.PI / 2;\r\n        currentContour.push(this._currentX + radius, this._currentY, STD_Z);\r\n        thetaBegin = 0;\r\n        // Draw 4 segments of arcs, [-PI, -PI/2] [-PI/2, 0] [0, PI/2] [PI/2 PI]\r\n        for (var k = 0; k < 4; k++) {\r\n            for (var i = 1; i <= CURVE_ACCURACY; i++) {\r\n                thetaNext = thetaBegin - i / CURVE_ACCURACY * halfPi;\r\n                x2 = x + radius * Math.cos(thetaNext);\r\n                y2 = y + radius * Math.sin(thetaNext);\r\n                currentContour.push(x2, y2, STD_Z);\r\n            }\r\n            thetaBegin -= halfPi;\r\n        }\r\n        this._currentX = x + radius;\r\n        this._currentY = y;\r\n        this._lastPathStartX = x + radius;\r\n        this._lastPathStartY = y;\r\n        this._hasDrawnAnything = true;\r\n        this._startingNewContour = false;\r\n    }\r\n\r\n    drawEllipse(x:number, y:number, width:number, height:number):void {\r\n        this._isDirty = true;\r\n        this.moveTo(x, y + height / 2);\r\n        var currentContour = this.getContourForClosedShapes();\r\n        var thetaNext:number;\r\n        var thetaBegin:number;\r\n        var centerX = x + width / 2, centerY = y + height / 2;\r\n        var x2:number, y2:number;\r\n        var halfPi = Math.PI / 2;\r\n        currentContour.push(this._currentX, this._currentY, STD_Z);\r\n        thetaBegin = Math.PI;\r\n        // Draw 4 segments of arcs, [-PI, -PI/2] [-PI/2, 0] [0, PI/2] [PI/2 PI]\r\n        // Brute, huh? Luckily there are 20 segments per PI/2...\r\n        for (var k = 0; k < 4; k++) {\r\n            for (var i = 1; i <= CURVE_ACCURACY; i++) {\r\n                thetaNext = thetaBegin - i / CURVE_ACCURACY * halfPi;\r\n                x2 = centerX + width / 2 * Math.cos(thetaNext);\r\n                y2 = centerY + height / 2 * Math.sin(thetaNext);\r\n                currentContour.push(x2, y2, STD_Z);\r\n            }\r\n            thetaBegin -= halfPi;\r\n        }\r\n        this._currentX = x + width;\r\n        this._currentY = y + height / 2;\r\n        this._lastPathStartX = x + width;\r\n        this._lastPathStartY = y + height / 2;\r\n        this._hasDrawnAnything = true;\r\n        this._startingNewContour = false;\r\n    }\r\n\r\n    drawRect(x:number, y:number, width:number, height:number):void {\r\n        this._isDirty = true;\r\n        this.moveTo(x, y);\r\n        // Create a new contour and draw a independent rectangle, should not use lineTo().\r\n        var currentContour = this.getContourForClosedShapes();\r\n        currentContour.push(x, y, STD_Z);\r\n        currentContour.push(x + width, y, STD_Z);\r\n        currentContour.push(x + width, y + height, STD_Z);\r\n        currentContour.push(x, y + height, STD_Z);\r\n        this._currentX = x;\r\n        this._currentY = y;\r\n        this._hasDrawnAnything = true;\r\n        this._startingNewContour = false;\r\n    }\r\n\r\n    drawRoundRect(x:number, y:number, width:number, height:number, ellipseWidth:number, ellipseHeight:number = NaN):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    lineTo(x:number, y:number):void {\r\n        this._isDirty = true;\r\n        var currentContour = this.getContourForLines();\r\n        if (!this._hasDrawnAnything || this._startingNewContour) {\r\n            currentContour.push(this._currentX, this._currentY, STD_Z);\r\n        }\r\n        currentContour.push(x, y, STD_Z);\r\n        this._currentX = x;\r\n        this._currentY = y;\r\n        this._hasDrawnAnything = true;\r\n        this._startingNewContour = false;\r\n    }\r\n\r\n    update():void {\r\n        if (this._isDirty) {\r\n            // Triangulate first\r\n            var tess = this._graphics.renderer.tessellator;\r\n            tess.gluTessProperty(libtess.gluEnum.GLU_TESS_WINDING_RULE, libtess.windingRule.GLU_TESS_WINDING_ODD);\r\n            tess.gluTessNormal(0, 0, 1);\r\n            var resultArray:number[][] = [];\r\n            tess.gluTessBeginPolygon(resultArray);\r\n            var contour:number[];\r\n            for (var i = 0; i < this._contours.length; i++) {\r\n                contour = this._contours[i];\r\n                if (contour.length > 0) {\r\n                    tess.gluTessBeginContour();\r\n                    for (var j = 0; j < contour.length; j += 3) {\r\n                        var coords = [contour[j], contour[j + 1], contour[j + 2]];\r\n                        tess.gluTessVertex(coords, coords);\r\n                    }\r\n                    tess.gluTessEndContour();\r\n                }\r\n            }\r\n            tess.gluTessEndPolygon();\r\n\r\n            this._vertices = [];\r\n            this._colors = [];\r\n            this._indices = [];\r\n            var colors = this._colors;\r\n            var indices = this._indices;\r\n            var vertices = this._vertices;\r\n            j = 0;\r\n            var tempArray:number[];\r\n            for (var i = 0; i < resultArray.length; i++) {\r\n                tempArray = resultArray[i];\r\n                for (var j = 0; j < tempArray.length; j++) {\r\n                    vertices.push(tempArray[j]);\r\n                }\r\n            }\r\n            j = 0;\r\n            for (var i = 0; i < vertices.length; i += 3) {\r\n                colors.push(this._r * this._a, this._g * this._a, this._b * this._a, this._a);\r\n                indices.push(j);\r\n                j++;\r\n            }\r\n        }\r\n\r\n        // Then update buffers\r\n        super.update();\r\n    }\r\n\r\n    render(renderer:WebGLRenderer):void {\r\n        if (this._vertices.length > 0) {\r\n            var target = renderer.currentRenderTarget;\r\n            RenderHelper.renderPrimitives2(renderer, target, this._vertexBuffer, this._colorBuffer, this._indexBuffer, false, target.isRoot, false);\r\n        }\r\n    }\r\n\r\n    private _r:number = 0;\r\n    private _g:number = 0;\r\n    private _b:number = 0;\r\n    private _a:number = 1;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
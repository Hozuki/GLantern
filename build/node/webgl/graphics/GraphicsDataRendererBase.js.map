{"version":3,"sources":["webgl/graphics/GraphicsDataRendererBase.ts"],"names":[],"mappings":"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","file":"webgl/graphics/GraphicsDataRendererBase.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/20.\r\n */\r\n\r\nimport {Graphics} from \"../../flash/display/Graphics\";\r\nimport {IGraphicsDataRenderer} from \"./IGraphicsDataRenderer\";\r\nimport {WebGLRenderer} from \"../WebGLRenderer\";\r\nimport {PackedArrayBuffer} from \"../PackedArrayBuffer\";\r\nimport {NotImplementedError} from \"../../flash/errors/NotImplementedError\";\r\n\r\nvar gl = (<any>this).WebGLRenderingContext || (<any>window).WebGLRenderingContext;\r\n\r\nexport class GraphicsDataRendererBase implements IGraphicsDataRenderer {\r\n\r\n    constructor(graphics:Graphics, lastPathStartX:number, lastPathStartY:number, currentX:number, currentY:number) {\r\n        this._graphics = graphics;\r\n        this._glc = graphics.renderer.context;\r\n        this.__initializeBuffers();\r\n        this._hasDrawnAnything = false;\r\n        this._lastPathStartX = lastPathStartX;\r\n        this._lastPathStartY = lastPathStartY;\r\n        this.moveTo(currentX, currentY);\r\n        this._isDirty = true;\r\n    }\r\n\r\n    bezierCurveTo(cx1:number, cy1:number, cx2:number, cy2:number, x:number, y:number):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    closePath():void {\r\n        // TODO: Consider the sample\r\n        // g.beginFill(0xff0000); g.drawRect(100, 100, 100, 100); g.lineStyle(0xff0000, 1);\r\n        // g.lineTo(400, 100); g.lineTo(200, 300); g.endFill();\r\n        if (this._hasDrawnAnything && (this._currentX != this._lastPathStartX || this._currentY != this._lastPathStartY)) {\r\n            this.lineTo(this._lastPathStartX, this._lastPathStartY);\r\n        }\r\n    }\r\n\r\n    curveTo(cx:number, cy:number, x:number, y:number):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    drawCircle(x:number, y:number, radius:number):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    drawEllipse(x:number, y:number, width:number, height:number):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    drawRect(x:number, y:number, width:number, height:number):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    drawRoundRect(x:number, y:number, width:number, height:number, ellipseWidth:number, ellipseHeight:number = NaN):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    lineTo(x:number, y:number):void {\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    moveTo(x:number, y:number):void {\r\n        // Multiple movements are combined into one, which will be flushed at each\r\n        // IGraphicsDataRenderer call that draws concrete elements\r\n        throw new NotImplementedError();\r\n    }\r\n\r\n    update():void {\r\n        // check whether to update the typed buffer\r\n        this.__syncBuffers();\r\n    }\r\n\r\n    render(renderer:WebGLRenderer):void {\r\n        console.warn(\"Do not call GraphicsDataRendererBase.render().\");\r\n    }\r\n\r\n    dispose():void {\r\n        this._vertexBuffer.dispose();\r\n        this._colorBuffer.dispose();\r\n        this._indexBuffer.dispose();\r\n        this._vertexBuffer = this._colorBuffer = this._indexBuffer = null;\r\n        this._vertices = this._colors = this._indices = null;\r\n        this._glc = null;\r\n    }\r\n\r\n    becomeDirty():void {\r\n        this._isDirty = true;\r\n    }\r\n\r\n    get hasDrawnAnything():boolean {\r\n        return this._hasDrawnAnything;\r\n    }\r\n\r\n    private __initializeBuffers():void {\r\n        this._vertices = [];\r\n        this._colors = [];\r\n        this._indices = [];\r\n        this._vertexBuffer = PackedArrayBuffer.create(this._glc, this._vertices, gl.FLOAT, gl.ARRAY_BUFFER);\r\n        this._colorBuffer = PackedArrayBuffer.create(this._glc, this._colors, gl.FLOAT, gl.ARRAY_BUFFER);\r\n        this._indexBuffer = PackedArrayBuffer.create(this._glc, this._indices, gl.UNSIGNED_SHORT, gl.ELEMENT_ARRAY_BUFFER);\r\n    }\r\n\r\n    protected __syncBuffers():void {\r\n        if (this._isDirty) {\r\n            // When the array buffers become dirty, their values will be updated automatically\r\n            // at next draw call.\r\n            this._vertexBuffer.setNewData(this._vertices);\r\n            this._vertexBuffer.becomeDirty();\r\n            this._colorBuffer.setNewData(this._colors);\r\n            this._colorBuffer.becomeDirty();\r\n            this._indexBuffer.setNewData(this._indices);\r\n            this._indexBuffer.becomeDirty();\r\n            this._isDirty = false;\r\n        }\r\n    }\r\n\r\n    protected _graphics:Graphics = null;\r\n    protected _glc:WebGLRenderingContext = null;\r\n    protected _isDirty:boolean = true;\r\n    // Local points buffer, format: X, Y, Z(=STD_Z)\r\n    protected _vertices:number[] = null;\r\n    // Colors of points, format: R, G, B, A\r\n    protected _colors:number[] = null;\r\n    // Local indices (for points) buffer\r\n    protected _indices:number[] = null;\r\n    protected _vertexBuffer:PackedArrayBuffer = null;\r\n    protected _colorBuffer:PackedArrayBuffer = null;\r\n    protected _indexBuffer:PackedArrayBuffer = null;\r\n    protected _currentX:number = 0;\r\n    protected _currentY:number = 0;\r\n    protected _hasDrawnAnything:boolean = false;\r\n    protected _lastPathStartX:number = 0;\r\n    protected _lastPathStartY:number = 0;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
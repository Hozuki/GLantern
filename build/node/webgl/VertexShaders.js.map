{"version":3,"sources":["webgl/VertexShaders.ts"],"names":["VertexShaders","VertexShaders.constructor","VertexShaders.buffered","VertexShaders.blurX","VertexShaders.blurY","VertexShaders.primitive","VertexShaders.replicate","VertexShaders.fxaa","VertexShaders.blur2"],"mappings":"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","file":"webgl/VertexShaders.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/18.\r\n */\r\n\r\n/*\r\n import * as fs from \"fs\";\r\n\r\n var Locations = {\r\n \"buffered\": \"./src/webgl/shaders/glsl/buffered.vert\",\r\n \"blurX\": \"./src/webgl/shaders/glsl/blur-x.vert\",\r\n \"blurY\": \"./src/webgl/shaders/glsl/blur-y.vert\",\r\n \"primitive\": \"./src/webgl/shaders/glsl/primitive.vert\",\r\n \"replicate\": \"./src/webgl/shaders/glsl/replicate.vert\",\r\n \"fxaa\": \"./src/webgl/shaders/glsl/fxaa.vert\"\r\n };\r\n\r\n var encoding:string = \"utf-8\";\r\n\r\n var Values = {\r\n \"buffered\": fs.readFileSync(Locations.buffered, encoding),\r\n \"blurX\": fs.readFileSync(Locations.blurX, encoding),\r\n \"blurY\": fs.readFileSync(Locations.blurY, encoding),\r\n \"primitive\": fs.readFileSync(Locations.primitive, encoding),\r\n \"replicate\": fs.readFileSync(Locations.replicate, encoding),\r\n \"fxaa\": fs.readFileSync(Locations.fxaa, encoding)\r\n };\r\n */\r\n\r\ninterface VertexShadersObject {\r\n    buffered?:string;\r\n    blurX?:string;\r\n    blurY?:string;\r\n    primitive?:string;\r\n    replicate?:string;\r\n    fxaa?:string;\r\n    blur2?:string;\r\n}\r\n\r\nvar Values:VertexShadersObject = {};\r\n\r\nexport abstract class VertexShaders {\r\n\r\n    static get buffered():string {\r\n        return Values.buffered;\r\n    }\r\n\r\n    static get blurX():string {\r\n        return Values.blurX;\r\n    }\r\n\r\n    static get blurY():string {\r\n        return Values.blurY;\r\n    }\r\n\r\n    static get primitive():string {\r\n        return Values.primitive;\r\n    }\r\n\r\n    static get replicate():string {\r\n        return Values.replicate;\r\n    }\r\n\r\n    static get fxaa():string {\r\n        return Values.fxaa;\r\n    }\r\n\r\n    static get blur2():string {\r\n        return Values.blur2;\r\n    }\r\n\r\n}\r\n\r\nValues.buffered = [\r\n    \"attribute vec3 aVertexPosition;\",\r\n    \"attribute vec2 aTextureCoord;\",\r\n    \"\",\r\n    \"uniform mat4 uProjectionMatrix;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"   gl_Position = uProjectionMatrix * vec4(aVertexPosition.xyz, 1.0);\",\r\n    \"   vTextureCoord = aTextureCoord;\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.blurX = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"attribute vec3 aVertexPosition;\",\r\n    \"attribute vec2 aTextureCoord;\",\r\n    \"\",\r\n    \"uniform float uStrength;\",\r\n    \"uniform mat4 uProjectionMatrix;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"varying vec2 vBlurTexCoords[6];\",\r\n    \"\",\r\n    \"void main()\",\r\n    \"{\",\r\n    \"    gl_Position = uProjectionMatrix * vec4(aVertexPosition.xyz, 1.0);\",\r\n    \"    vTextureCoord = aTextureCoord;\",\r\n    \"\",\r\n    \"    vBlurTexCoords[0] = aTextureCoord + vec2(-0.012 * uStrength, 0.0);\",\r\n    \"    vBlurTexCoords[1] = aTextureCoord + vec2(-0.008 * uStrength, 0.0);\",\r\n    \"    vBlurTexCoords[2] = aTextureCoord + vec2(-0.004 * uStrength, 0.0);\",\r\n    \"    vBlurTexCoords[3] = aTextureCoord + vec2( 0.004 * uStrength, 0.0);\",\r\n    \"    vBlurTexCoords[4] = aTextureCoord + vec2( 0.008 * uStrength, 0.0);\",\r\n    \"    vBlurTexCoords[5] = aTextureCoord + vec2( 0.012 * uStrength, 0.0);\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.blurY = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"attribute vec3 aVertexPosition;\",\r\n    \"attribute vec2 aTextureCoord;\",\r\n    \"\",\r\n    \"uniform float uStrength;\",\r\n    \"uniform mat4 uProjectionMatrix;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"varying vec2 vBlurTexCoords[6];\",\r\n    \"\",\r\n    \"void main()\",\r\n    \"{\",\r\n    \"    gl_Position = uProjectionMatrix * vec4(aVertexPosition.xyz, 1.0);\",\r\n    \"    vTextureCoord = aTextureCoord;\",\r\n    \"\",\r\n    \"    vBlurTexCoords[0] = aTextureCoord + vec2(0.0, -0.012 * uStrength);\",\r\n    \"    vBlurTexCoords[1] = aTextureCoord + vec2(0.0, -0.008 * uStrength);\",\r\n    \"    vBlurTexCoords[2] = aTextureCoord + vec2(0.0, -0.004 * uStrength);\",\r\n    \"    vBlurTexCoords[3] = aTextureCoord + vec2(0.0,  0.004 * uStrength);\",\r\n    \"    vBlurTexCoords[4] = aTextureCoord + vec2(0.0,  0.008 * uStrength);\",\r\n    \"    vBlurTexCoords[5] = aTextureCoord + vec2(0.0,  0.012 * uStrength);\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.primitive = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"attribute vec3 aVertexPosition;\",\r\n    \"attribute vec4 aVertexColor;\",\r\n    \"\",\r\n    \"uniform mat4 uProjectionMatrix;\",\r\n    \"uniform mat4 uTransformMatrix;\",\r\n    \"\",\r\n    \"varying vec4 vVertexColor;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"   gl_Position = uProjectionMatrix * uTransformMatrix * vec4(aVertexPosition.xyz, 1.0);\",\r\n    \"   vVertexColor = aVertexColor;\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.replicate = [\r\n    \"attribute vec3 aVertexPosition;\",\r\n    \"attribute vec2 aTextureCoord;\",\r\n    \"\",\r\n    \"uniform mat4 uProjectionMatrix;\",\r\n    \"uniform vec2 uOriginalSize;\",\r\n    \"uniform vec2 uFitSize;\",\r\n    \"uniform bool uFlipX;\",\r\n    \"uniform bool uFlipY;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"    vec3 newVertexPostion = aVertexPosition;\",\r\n    \"   vec2 newTextureCoord = aTextureCoord;\",\r\n    \"   if (uFlipX) {\",\r\n    \"       newTextureCoord.x = 1.0 - newTextureCoord.x;\",\r\n    \"       newVertexPostion.x -= (uFitSize - uOriginalSize).x;\",\r\n    \"   }\",\r\n    \"   if (uFlipY) {\",\r\n    \"       newTextureCoord.y = 1.0 - newTextureCoord.y;\",\r\n    \"       newVertexPostion.y -= (uFitSize - uOriginalSize).y;\",\r\n    \"   }\",\r\n    \"   gl_Position = uProjectionMatrix * vec4(newVertexPostion.xyz, 1.0);\",\r\n    \"   vTextureCoord = newTextureCoord;\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\n// For the full license, please refer to shaders/glsl/fxaa.vert\r\nValues.fxaa = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"attribute vec3 aVertexPosition;\",\r\n    \"attribute vec2 aTextureCoord;\",\r\n    \"\",\r\n    \"uniform mat4 uProjectionMatrix;\",\r\n    \"uniform vec2 uResolution;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"varying vec2 vResolution;\",\r\n    \"\",\r\n    \"varying vec2 v_rgbNW;\",\r\n    \"varying vec2 v_rgbNE;\",\r\n    \"varying vec2 v_rgbSW;\",\r\n    \"varying vec2 v_rgbSE;\",\r\n    \"varying vec2 v_rgbM;\",\r\n    \"\",\r\n    \"void texcoords(vec2 fragCoord, vec2 resolution,\",\r\n    \"   out vec2 v_rgbNW, out vec2 v_rgbNE,\",\r\n    \"   out vec2 v_rgbSW, out vec2 v_rgbSE,\",\r\n    \"   out vec2 v_rgbM) {\",\r\n    \"   vec2 inverseVP = 1.0 / resolution.xy;\",\r\n    \"   v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\",\r\n    \"   v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\",\r\n    \"   v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\",\r\n    \"   v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\",\r\n    \"   v_rgbM = vec2(fragCoord * inverseVP);\",\r\n    \"}\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"   gl_Position = uProjectionMatrix * vec4(aVertexPosition, 1.0);\",\r\n    \"   vTextureCoord = aTextureCoord;\",\r\n    \"   vResolution = uResolution;\",\r\n    \"   \",\r\n    \"   texcoords(aTextureCoord * uResolution, uResolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.blur2 = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"attribute vec3 aVertexPosition;\",\r\n    \"attribute vec2 aTextureCoord;\",\r\n    \"\",\r\n    \"uniform mat4 uProjectionMatrix;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"\",\r\n    \"void main()\",\r\n    \"{\",\r\n    \"    gl_Position = uProjectionMatrix * vec4(aVertexPosition.xyz, 1.0);\",\r\n    \"    vTextureCoord = aTextureCoord;\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["webgl/FilterBase.ts"],"names":["FilterBase","FilterBase.constructor","FilterBase.notifyAdded","FilterBase.notifyRemoved","FilterBase.___initialize","FilterBase.___dispose","FilterBase.dispose","FilterBase.initialize"],"mappings":"AAAA;;GAEG;AAOH;IAEIA,oBAAYA,OAAqBA;QA2CvBC,mBAAcA,GAAiBA,IAAIA,CAACA;QACtCA,oBAAeA,GAAUA,CAACA,CAACA;QA3C/BA,IAAIA,CAACA,cAAcA,GAAGA,OAAOA,CAACA;IAClCA,CAACA;IAIDD;;;;OAIGA;IACHA,gCAAWA,GAAXA;QACIE,EAAEA,CAACA,CAACA,IAAIA,CAACA,eAAeA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC5BA,IAAIA,CAACA,YAAYA,EAAEA,CAACA;QACxBA,CAACA;QACDA,IAAIA,CAACA,eAAeA,EAAEA,CAACA;IAC3BA,CAACA;IAEDF;;;OAGGA;IACHA,kCAAaA,GAAbA;QACIG,IAAIA,CAACA,eAAeA,EAAEA,CAACA;QACvBA,EAAEA,CAACA,CAACA,IAAIA,CAACA,eAAeA,IAAIA,CAACA,CAACA,CAACA,CAACA;YAC5BA,IAAIA,CAACA,SAASA,EAAEA,CAACA;QACrBA,CAACA;IACLA,CAACA;IAESH,iCAAYA,GAAtBA;IACAI,CAACA;IAESJ,8BAASA,GAAnBA;IACAK,CAACA;IAEDL,4BAAOA,GAAPA;QACIM,IAAIA,CAACA,SAASA,EAAEA,CAACA;IACrBA,CAACA;IAEDN,+BAAUA,GAAVA;QACIO,IAAIA,CAACA,YAAYA,EAAEA,CAACA;IACxBA,CAACA;IAKLP,iBAACA;AAADA,CAhDA,AAgDCA,IAAA;AAhDqB,kBAAU,aAgD/B,CAAA","file":"webgl/FilterBase.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/18.\r\n */\r\n\r\nimport {FilterManager} from \"./FilterManager\";\r\nimport {RenderTarget2D} from \"./RenderTarget2D\";\r\nimport {WebGLRenderer} from \"./WebGLRenderer\";\r\nimport {IBitmapFilter} from \"./IBitmapFilter\";\r\n\r\nexport abstract class FilterBase implements IBitmapFilter {\r\n\r\n    constructor(manager:FilterManager) {\r\n        this._filterManager = manager;\r\n    }\r\n\r\n    abstract process(renderer:WebGLRenderer, input:RenderTarget2D, output:RenderTarget2D, clearOutput:boolean):void;\r\n\r\n    /**\r\n     * Called when it is added to a {@link DisplayObject.filters} array.\r\n     * Notice that it may be called multiple times, but a filter should only be initialized once\r\n     * if its output buffer is null.\r\n     */\r\n    notifyAdded():void {\r\n        if (this._referenceCount <= 0) {\r\n            this.__initialize();\r\n        }\r\n        this._referenceCount++;\r\n    }\r\n\r\n    /**\r\n     * Called when it is removed from a {@link DisplayObject.filters} array.\r\n     * Notice that it may be called multiple times, but should do nothing if its output is already null.\r\n     */\r\n    notifyRemoved():void {\r\n        this._referenceCount--;\r\n        if (this._referenceCount <= 0) {\r\n            this.__dispose();\r\n        }\r\n    }\r\n\r\n    protected __initialize():void {\r\n    }\r\n\r\n    protected __dispose():void {\r\n    }\r\n\r\n    dispose():void {\r\n        this.__dispose();\r\n    }\r\n\r\n    initialize():void {\r\n        this.__initialize();\r\n    }\r\n\r\n    protected _filterManager:FilterManager = null;\r\n    private _referenceCount:number = 0;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
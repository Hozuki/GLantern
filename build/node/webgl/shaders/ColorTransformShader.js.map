{"version":3,"sources":["webgl/shaders/ColorTransformShader.ts"],"names":[],"mappings":"AAAA;;GAEG;;;;;;;AAEH,6BAA2B,iBAAiB,CAAC,CAAA;AAG7C,8BAA4B,kBAAkB,CAAC,CAAA;AAC/C,gCAA8B,oBAAoB,CAAC,CAAA;AACnD,+BAA6B,kBAAkB,CAAC,CAAA;AAChD,8BAA4B,kBAAkB,CAAC,CAAA;AAE/C;IAA0C,wCAAc;IAEpD,8BAAY,OAAqB;QAC7B,kBAAM,OAAO,EAAE,oBAAoB,CAAC,aAAa,EAAE,oBAAoB,CAAC,eAAe,CAAC,CAAC;IAC7F,CAAC;IAED,6CAAc,GAAd,UAAe,IAAa;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;YACnB,OAAO,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;YACxE,MAAM,CAAC;QACX,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;IAC5D,CAAC;IAMS,0CAAW,GAArB,UAAsB,OAAqB,EAAE,QAAkC,EAAE,UAAsC;QACnH,gBAAK,CAAC,WAAW,YAAC,OAAO,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAEjD,IAAI,CAAc,CAAC;QACnB,IAAI,kBAAkB,GAAG;YACrB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACb,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACb,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACb,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;SAChB,CAAC;QAEF,CAAC,GAAG,IAAI,2BAAY,EAAE,CAAC;QACvB,CAAC,CAAC,IAAI,GAAG,cAAc,CAAC;QACxB,CAAC,CAAC,IAAI,GAAG,6BAAa,CAAC,IAAI,CAAC;QAC5B,CAAC,CAAC,KAAK,GAAG,kBAAkB,CAAC;QAC7B,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5B,CAAC;IApBM,sCAAiB,GAAU,sBAAsB,CAAC;IAClD,oCAAe,GAAU,iCAAe,CAAC,cAAc,CAAC;IACxD,kCAAa,GAAU,6BAAa,CAAC,QAAQ,CAAC;IAoBzD,2BAAC;AAAD,CApCA,AAoCC,CApCyC,+BAAc,GAoCvD;AApCY,4BAAoB,uBAoChC,CAAA","file":"webgl/shaders/ColorTransformShader.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/18.\r\n */\r\n\r\nimport {UniformCache} from \"../UniformCache\";\r\nimport {AttributeCache} from \"../AttributeCache\";\r\nimport {ShaderManager} from \"../ShaderManager\";\r\nimport {VertexShaders} from \"../VertexShaders\";\r\nimport {FragmentShaders} from \"../FragmentShaders\";\r\nimport {BufferedShader} from \"./BufferedShader\";\r\nimport {WebGLDataType} from \"../WebGLDataType\";\r\n\r\nexport class ColorTransformShader extends BufferedShader {\r\n\r\n    constructor(manager:ShaderManager) {\r\n        super(manager, ColorTransformShader.VERTEX_SOURCE, ColorTransformShader.FRAGMENT_SOURCE);\r\n    }\r\n\r\n    setColorMatrix(r4c5:number[]):void {\r\n        if (r4c5.length < 20) {\r\n            console.warn(\"ColorTransformShader.setColorMatrix needs a 4x5 matrix.\");\r\n            return;\r\n        }\r\n        this._uniforms.get(\"uColorMatrix\").value = r4c5.slice();\r\n    }\r\n\r\n    static SHADER_CLASS_NAME:string = \"ColorTransformShader\";\r\n    static FRAGMENT_SOURCE:string = FragmentShaders.colorTransform;\r\n    static VERTEX_SOURCE:string = VertexShaders.buffered;\r\n\r\n    protected __localInit(manager:ShaderManager, uniforms:Map<string, UniformCache>, attributes:Map<string, AttributeCache>):void {\r\n        super.__localInit(manager, uniforms, attributes);\r\n\r\n        var u:UniformCache;\r\n        var defaultColorMatrix = [\r\n            1, 0, 0, 0, 0,\r\n            0, 1, 0, 0, 0,\r\n            0, 0, 1, 0, 0,\r\n            0, 0, 0, 1, 0\r\n        ];\r\n\r\n        u = new UniformCache();\r\n        u.name = \"uColorMatrix\";\r\n        u.type = WebGLDataType.U1FV;\r\n        u.value = defaultColorMatrix;\r\n        uniforms.set(u.name, u);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
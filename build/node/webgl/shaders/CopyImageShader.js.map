{"version":3,"sources":["webgl/shaders/CopyImageShader.ts"],"names":[],"mappings":"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","file":"webgl/shaders/CopyImageShader.js","sourcesContent":["/**\r\n * Created by MIC on 2015/12/23.\r\n */\r\n\r\nimport {UniformCache} from \"../UniformCache\";\r\nimport {AttributeCache} from \"../AttributeCache\";\r\nimport {ShaderManager} from \"../ShaderManager\";\r\nimport {VertexShaders} from \"../VertexShaders\";\r\nimport {FragmentShaders} from \"../FragmentShaders\";\r\nimport {BufferedShader} from \"./BufferedShader\";\r\nimport {WebGLDataType} from \"../WebGLDataType\";\r\nimport {Matrix3D} from \"../../flash/geom/Matrix3D\";\r\n\r\nexport class CopyImageShader extends BufferedShader {\r\n\r\n    constructor(manager:ShaderManager) {\r\n        super(manager, CopyImageShader.VERTEX_SOURCE, CopyImageShader.FRAGMENT_SOURCE);\r\n    }\r\n\r\n    setFlipX(flip:boolean):void {\r\n        this._uniforms.get(\"uFlipX\").value = flip;\r\n    }\r\n\r\n    setFlipY(flip:boolean):void {\r\n        this._uniforms.get(\"uFlipY\").value = flip;\r\n    }\r\n\r\n    setOriginalSize(xy:number[]):void {\r\n        this._uniforms.get(\"uOriginalSize\").value = xy.slice();\r\n    }\r\n\r\n    setFitSize(xy:number[]):void {\r\n        this._uniforms.get(\"uFitSize\").value = xy.slice();\r\n    }\r\n\r\n    setAlpha(alpha:number):void {\r\n        this._uniforms.get(\"uAlpha\").value = alpha;\r\n    }\r\n\r\n    setTransform(matrix:Matrix3D):void {\r\n        this._uniforms.get(\"uTransformMatrix\").value = matrix.toArray();\r\n    }\r\n\r\n    static SHADER_CLASS_NAME:string = \"CopyImageShader\";\r\n    static FRAGMENT_SOURCE:string = FragmentShaders.copyImage;\r\n    static VERTEX_SOURCE:string = VertexShaders.copyImage;\r\n\r\n    protected __localInit(manager:ShaderManager, uniforms:Map<string, UniformCache>, attributes:Map<string, AttributeCache>):void {\r\n        super.__localInit(manager, uniforms, attributes);\r\n\r\n        var u:UniformCache;\r\n        var transformMatrix = new Matrix3D();\r\n        transformMatrix.identity();\r\n\r\n        u = new UniformCache();\r\n        u.name = \"uFlipX\";\r\n        u.type = WebGLDataType.UBool;\r\n        u.value = false;\r\n        uniforms.set(u.name, u);\r\n\r\n        u = new UniformCache();\r\n        u.name = \"uFlipY\";\r\n        u.type = WebGLDataType.UBool;\r\n        u.value = false;\r\n        uniforms.set(u.name, u);\r\n\r\n        u = new UniformCache();\r\n        u.name = \"uOriginalSize\";\r\n        u.type = WebGLDataType.U2F;\r\n        u.value = [0, 0];\r\n        uniforms.set(u.name, u);\r\n\r\n        u = new UniformCache();\r\n        u.name = \"uFitSize\";\r\n        u.type = WebGLDataType.U2F;\r\n        u.value = [0, 0];\r\n        uniforms.set(u.name, u);\r\n\r\n        u = new UniformCache();\r\n        u.name = \"uTransformMatrix\";\r\n        u.type = WebGLDataType.UMat4;\r\n        u.value = transformMatrix.toArray();\r\n        u.transpose = false;\r\n        uniforms.set(u.name, u);\r\n\r\n        u = new UniformCache();\r\n        u.name = \"uAlpha\";\r\n        u.type = WebGLDataType.U1F;\r\n        u.value = 1;\r\n        uniforms.set(u.name, u);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
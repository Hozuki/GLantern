{"version":3,"sources":["webgl/fragmentshaders.ts"],"names":["FragmentShaders","FragmentShaders.constructor","FragmentShaders.buffered","FragmentShaders.blur","FragmentShaders.primitive","FragmentShaders.colorTransform","FragmentShaders.fxaa","FragmentShaders.blur2","FragmentShaders.copyImage"],"mappings":"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","file":"webgl/FragmentShaders.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/18.\r\n */\r\n\r\ninterface FragmentShadersObject {\r\n    buffered?:string;\r\n    blur?:string;\r\n    primitive?:string;\r\n    colorTransform?:string;\r\n    fxaa?:string;\r\n    blur2?:string;\r\n    copyImage?:string;\r\n}\r\n\r\nvar Values:FragmentShadersObject = Object.create(null);\r\n\r\nexport abstract class FragmentShaders {\r\n\r\n    static get buffered():string {\r\n        return Values.buffered;\r\n    }\r\n\r\n    static get blur():string {\r\n        return Values.blur;\r\n    }\r\n\r\n    static get primitive():string {\r\n        return Values.primitive;\r\n    }\r\n\r\n    static get colorTransform():string {\r\n        return Values.colorTransform;\r\n    }\r\n\r\n    static get fxaa():string {\r\n        return Values.fxaa;\r\n    }\r\n\r\n    static get blur2():string {\r\n        return Values.blur2;\r\n    }\r\n\r\n    static get copyImage():string {\r\n        return Values.copyImage;\r\n    }\r\n\r\n}\r\n\r\nValues.buffered = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D uSampler;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"    gl_FragColor = texture2D(uSampler, vTextureCoord);\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.blur = [\r\n    \"precision lowp float;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"varying vec2 vBlurTexCoords[6];\",\r\n    \"\",\r\n    \"uniform sampler2D uSampler;\",\r\n    \"\",\r\n    \"void main()\",\r\n    \"{\",\r\n    \"   gl_FragColor = vec4(0.0);\",\r\n    \"   \",\r\n    \"   gl_FragColor += texture2D(uSampler, vBlurTexCoords[0]) * 0.004431848411938341;\",\r\n    \"   gl_FragColor += texture2D(uSampler, vBlurTexCoords[1]) * 0.05399096651318985;\",\r\n    \"   gl_FragColor += texture2D(uSampler, vBlurTexCoords[2]) * 0.2419707245191454;\",\r\n    \"   gl_FragColor += texture2D(uSampler, vTextureCoord    ) * 0.3989422804014327;\",\r\n    \"   gl_FragColor += texture2D(uSampler, vBlurTexCoords[3]) * 0.2419707245191454;\",\r\n    \"   gl_FragColor += texture2D(uSampler, vBlurTexCoords[4]) * 0.05399096651318985;\",\r\n    \"   gl_FragColor += texture2D(uSampler, vBlurTexCoords[5]) * 0.004431848411938341;\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.primitive = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform float uAlpha;\",\r\n    \"\",\r\n    \"varying vec4 vVertexColor;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"   gl_FragColor = vVertexColor * uAlpha;\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.colorTransform = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"uniform sampler2D uSampler;\",\r\n    \"uniform float uColorMatrix[25];\",\r\n    \"\",\r\n    \"void main(void)\",\r\n    \"{\",\r\n    \"   vec4 c = texture2D(uSampler, vTextureCoord);\",\r\n    \"   \",\r\n    \"   gl_FragColor.r =  (uColorMatrix[0] * c.r);\",\r\n    \"   gl_FragColor.r += (uColorMatrix[1] * c.g);\",\r\n    \"   gl_FragColor.r += (uColorMatrix[2] * c.b);\",\r\n    \"   gl_FragColor.r += (uColorMatrix[3] * c.a);\",\r\n    \"   gl_FragColor.r +=  uColorMatrix[4];\",\r\n    \"   \",\r\n    \"   gl_FragColor.g =  (uColorMatrix[5] * c.r);\",\r\n    \"   gl_FragColor.g += (uColorMatrix[6] * c.g);\",\r\n    \"   gl_FragColor.g += (uColorMatrix[7] * c.b);\",\r\n    \"   gl_FragColor.g += (uColorMatrix[8] * c.a);\",\r\n    \"   gl_FragColor.g +=  uColorMatrix[9];\",\r\n    \"   \",\r\n    \"   gl_FragColor.b =  (uColorMatrix[10] * c.r);\",\r\n    \"   gl_FragColor.b += (uColorMatrix[11] * c.g);\",\r\n    \"   gl_FragColor.b += (uColorMatrix[12] * c.b);\",\r\n    \"   gl_FragColor.b += (uColorMatrix[13] * c.a);\",\r\n    \"   gl_FragColor.b +=  uColorMatrix[14];\",\r\n    \"   \",\r\n    \"   gl_FragColor.a =  (uColorMatrix[15] * c.r);\",\r\n    \"   gl_FragColor.a += (uColorMatrix[16] * c.g);\",\r\n    \"   gl_FragColor.a += (uColorMatrix[17] * c.b);\",\r\n    \"   gl_FragColor.a += (uColorMatrix[18] * c.a);\",\r\n    \"   gl_FragColor.a +=  uColorMatrix[19];\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\n// For the full license, please refer to shaders/glsl/fxaa.frag\r\nValues.fxaa = [\r\n    \"precision lowp float;\",\r\n    \"\",\r\n    \"#ifndef FXAA_REDUCE_MIN\",\r\n    \"#define FXAA_REDUCE_MIN   (1.0/ 128.0)\",\r\n    \"#endif\",\r\n    \"#ifndef FXAA_REDUCE_MUL\",\r\n    \"#define FXAA_REDUCE_MUL   (1.0 / 8.0)\",\r\n    \"#endif\",\r\n    \"#ifndef FXAA_SPAN_MAX\",\r\n    \"#define FXAA_SPAN_MAX     8.0\",\r\n    \"#endif\",\r\n    \"\",\r\n    \"vec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\",\r\n    \"vec2 v_rgbNW, vec2 v_rgbNE,\",\r\n    \"vec2 v_rgbSW, vec2 v_rgbSE,\",\r\n    \"vec2 v_rgbM) {\",\r\n    \"vec4 color;\",\r\n    \"mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\",\r\n    \"vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\",\r\n    \"vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\",\r\n    \"vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\",\r\n    \"vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\",\r\n    \"vec4 texColor = texture2D(tex, v_rgbM);\",\r\n    \"vec3 rgbM  = texColor.xyz;\",\r\n    \"vec3 luma = vec3(0.299, 0.587, 0.114);\",\r\n    \"float lumaNW = dot(rgbNW, luma);\",\r\n    \"float lumaNE = dot(rgbNE, luma);\",\r\n    \"float lumaSW = dot(rgbSW, luma);\",\r\n    \"float lumaSE = dot(rgbSE, luma);\",\r\n    \"float lumaM  = dot(rgbM,  luma);\",\r\n    \"float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\",\r\n    \"float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\",\r\n    \"\",\r\n    \"mediump vec2 dir;\",\r\n    \"dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\",\r\n    \"dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\",\r\n    \"\",\r\n    \"float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\",\r\n    \"    (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\",\r\n    \"\",\r\n    \"float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\",\r\n    \"dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\",\r\n    \"        max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\",\r\n    \"            dir * rcpDirMin)) * inverseVP;\",\r\n    \"\",\r\n    \"vec3 rgbA = 0.5 * (\",\r\n    \"    texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\",\r\n    \"    texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\",\r\n    \"vec3 rgbB = rgbA * 0.5 + 0.25 * (\",\r\n    \"    texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\",\r\n    \"    texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\",\r\n    \"\",\r\n    \"float lumaB = dot(rgbB, luma);\",\r\n    \"if ((lumaB < lumaMin) || (lumaB > lumaMax))\",\r\n    \"    color = vec4(rgbA, texColor.a);\",\r\n    \"else\",\r\n    \"    color = vec4(rgbB, texColor.a);\",\r\n    \"return color;\",\r\n    \"}\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"varying vec2 vResolution;\",\r\n    \"\",\r\n    \"varying vec2 v_rgbNW;\",\r\n    \"varying vec2 v_rgbNE;\",\r\n    \"varying vec2 v_rgbSW;\",\r\n    \"varying vec2 v_rgbSE;\",\r\n    \"varying vec2 v_rgbM;\",\r\n    \"\",\r\n    \"uniform sampler2D uSampler;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"    gl_FragColor = fxaa(uSampler, vTextureCoord * vResolution, vResolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.blur2 = [\r\n    \"precision lowp float;\",\r\n    \"\",\r\n    \"uniform sampler2D uSampler;\",\r\n    \"\",\r\n    \"uniform float uResolution;\",\r\n    \"uniform float uStrength;\",\r\n    \"uniform vec2 uBlurDirection;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"\",\r\n    \"float offset[3];\",\r\n    \"float weight[3];\",\r\n    \"\",\r\n    \"void main()\",\r\n    \"{\",\r\n    \"    offset[0] = 0.0; offset[1] = 1.3846153846; offset[2] = 3.2307692308;\",\r\n    \"    weight[0] = 0.2270270270; weight[1] = 0.3162162162; weight[2] = 0.0702702703;\",\r\n    \"    gl_FragColor = texture2D(uSampler, vec2(vTextureCoord)) * weight[0];\",\r\n    \"    float xDir = uBlurDirection.x / sqrt(uBlurDirection.x * uBlurDirection.x + uBlurDirection.y * uBlurDirection.y);\",\r\n    \"    float yDir = uBlurDirection.y / sqrt(uBlurDirection.x * uBlurDirection.x + uBlurDirection.y * uBlurDirection.y);\",\r\n    \"    for (int i = 1; i < 3; i++)\",\r\n    \"    {\",\r\n    \"        gl_FragColor += texture2D(uSampler, (vec2(vTextureCoord) + vec2(offset[i] * xDir, offset[i] * yDir) * uStrength / uResolution)) * weight[i];\",\r\n    \"        gl_FragColor += texture2D(uSampler, (vec2(vTextureCoord) - vec2(offset[i] * xDir, offset[i] * yDir) * uStrength / uResolution)) * weight[i];\",\r\n    \"    }\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n\r\nValues.copyImage = [\r\n    \"precision mediump float;\",\r\n    \"\",\r\n    \"uniform sampler2D uSampler;\",\r\n    \"uniform float uAlpha;\",\r\n    \"\",\r\n    \"varying vec2 vTextureCoord;\",\r\n    \"\",\r\n    \"void main() {\",\r\n    \"    gl_FragColor = texture2D(uSampler, vTextureCoord) * uAlpha;\",\r\n    \"}\"\r\n].join(\"\\n\");\r\n"],"sourceRoot":"/source/"}
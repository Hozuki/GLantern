{"version":3,"sources":["flash/events/EventDispatcher.ts"],"names":[],"mappings":"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","file":"flash/events/EventDispatcher.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/18.\r\n */\r\n\r\nimport {IDisposable} from \"../../IDisposable\";\r\nimport {listeners} from \"cluster\";\r\nimport {GLUtil} from \"../../GLUtil\";\r\n\r\nexport abstract class EventDispatcher implements IDisposable {\r\n\r\n    constructor() {\r\n        this._listeners = new Map<string, Function[]>();\r\n    }\r\n\r\n    addEventListener(type:string, listener:Function, useCapture:boolean = false):void {\r\n        // jabbany\r\n        if (!this._listeners.has(type)) {\r\n            this._listeners.set(type, []);\r\n        }\r\n        this._listeners.get(type).push(listener);\r\n    }\r\n\r\n    dispatchEvent(event:Event, data?:any):boolean {\r\n        // jabbany\r\n        if (this._listeners.has(event.type) && this._listeners.get(event.type) !== null) {\r\n            var arr = this._listeners.get(event.type);\r\n            for (var i = 0; i < arr.length; ++i) {\r\n                try {\r\n                    arr[i].call(null, data);\r\n                } catch (ex) {\r\n                    if (ex.hasOwnProperty(\"stack\")) {\r\n                        GLUtil.trace(ex.stack.toString(), \"dispatchEvent: error\");\r\n                    } else {\r\n                        GLUtil.trace(ex.toString(), \"dispatchEvent: error\");\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    removeEventListener(type:string, listener:Function, useCapture:boolean = false):void {\r\n        // jabbany\r\n        if (!this._listeners.has(type) || this._listeners.get(type).length === 0) {\r\n            return;\r\n        }\r\n        var index = this._listeners.get(type).indexOf(listener);\r\n        if (index >= 0) {\r\n            this._listeners.get(type).splice(index, 1);\r\n        }\r\n    }\r\n\r\n    hasEventListener(type:string):boolean {\r\n        return this._listeners.has(type);\r\n    }\r\n\r\n    willTrigger(type:string):boolean {\r\n        return this.hasEventListener(type) && this._listeners.get(type).length > 0;\r\n    }\r\n\r\n    dispose():void {\r\n        this._listeners.forEach((listeners:Function[]):void => {\r\n            while (listeners.length > 0) {\r\n                listeners.pop();\r\n            }\r\n        });\r\n        this._listeners.clear();\r\n    }\r\n\r\n    private _listeners:Map<string, Function[]> = null;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}
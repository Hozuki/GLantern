{"version":3,"sources":["glantern/flash/geom/point.ts"],"names":["Point","Point.constructor","Point.add","Point.clone","Point.copyFrom","Point.distance","Point.equals","Point.interpolate","Point.length","Point.normalize","Point.offset","Point.polar","Point.setTo","Point.subtract","Point.toString"],"mappings":"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","file":"glantern/flash/geom/Point.js","sourcesContent":["/**\r\n * Created by MIC on 2015/11/18.\r\n */\r\n\r\nimport {ICopyable} from \"../../ICopyable\";\r\nimport {ICloneable} from \"../../ICloneable\";\r\nimport {GLUtil} from \"../../../../lib/glantern-utils/src/GLUtil\";\r\n\r\nexport class Point implements ICloneable<Point>, ICopyable<Point> {\r\n\r\n    constructor(x:number = 0, y:number = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    add(v:Point):Point {\r\n        return new Point(this.x + v.x, this.y + v.y);\r\n    }\r\n\r\n    clone():Point {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    copyFrom(sourcePoint:Point):void {\r\n        this.x = sourcePoint.x;\r\n        this.y = sourcePoint.y;\r\n    }\r\n\r\n    static distance(pt1:Point, pt2:Point):number {\r\n        return Math.sqrt((pt1.x - pt2.x) * (pt1.x - pt2.x) + (pt1.y - pt2.y) * (pt1.y - pt2.y));\r\n    }\r\n\r\n    equals(toCompare:Point):boolean {\r\n        return this.x === toCompare.x && this.y === toCompare.y;\r\n    }\r\n\r\n    static interpolate(pt1:Point, pt2:Point, f:number):Point {\r\n        f = GLUtil.limitInto(f, 0, 1);\r\n        return new Point(pt1.x * f + pt2.x * (1 - f), pt1.y * f + pt2.y * (1 - f));\r\n    }\r\n\r\n    get length():number {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    }\r\n\r\n    normalize(thickness:number):void {\r\n        var len = this.length;\r\n        if (len > 0) {\r\n            this.x *= thickness / len;\r\n            this.y *= thickness / len;\r\n        }\r\n    }\r\n\r\n    offset(dx:number, dy:number):void {\r\n        this.x += dx;\r\n        this.y += dy;\r\n    }\r\n\r\n    static polar(len:number, angle:number):Point {\r\n        return new Point(len * Math.cos(angle), len * Math.sin(angle));\r\n    }\r\n\r\n    setTo(xa:number, ya:number):void {\r\n        this.x = xa;\r\n        this.y = ya;\r\n    }\r\n\r\n    subtract(v:Point):Point {\r\n        return new Point(this.x - v.x, this.y - v.y);\r\n    }\r\n\r\n    toString():string {\r\n        return `(X=${this.x}, y=${this.y})`;\r\n    }\r\n\r\n    x:number = 0;\r\n    y:number = 0;\r\n\r\n}\r\n"],"sourceRoot":"/source/"}